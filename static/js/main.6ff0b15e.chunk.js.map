{"version":3,"sources":["components/Quotes.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Quotes","useState","quotes","fetchQuotes","a","fetch","mode","response","console","log","className","onClick","map","quote","index","url","author","href","App","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OA6CeA,EA1Cc,WAAO,IAAD,EAENC,mBAAgB,IAFV,mBAE1BC,EAF0B,KAI3BC,GAJ2B,KAIhB,uCAAG,4BAAAC,EAAA,4DACN,2DADM,SAEKC,MADX,2DACsB,CAAEC,KAAM,YAFxB,cAEZC,EAFY,OAGlBC,QAAQC,IAAIF,GAHM,kBAIXA,GAJW,2CAAH,sDAOjB,OACE,gCAEE,gCACE,wBAAQG,UAAU,eAAeC,QAASR,EAA1C,yBAGA,0BAIF,qBAAKO,UAAU,SAAf,SACGR,GACCA,EAAOU,KAAI,SAACC,EAAOC,GACjB,IAAIC,EAAG,gDAA4CF,EAAMA,MAAlD,cAA6DA,EAAMG,QAC1E,OACE,sBAAKN,UAAU,QAAf,UACE,6BAAKG,EAAMA,QACX,6BAAKA,EAAMG,SACX,mBAAGN,UAAU,uBACXO,KAAMF,EADR,qBAH0BD,YCV3BI,E,4JAhBb,WACE,OACE,sBAAKR,UAAU,MAAf,UACE,wBAAQA,UAAU,SAAlB,SACE,qBAAKA,UAAU,YAAf,SACE,0DAGJ,qBAAKA,UAAU,YAAf,SACE,cAAC,EAAD,a,GAVQS,aCWHC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6ff0b15e.chunk.js","sourcesContent":["import React from 'react';\nimport { useState } from 'react';\n\nconst Quotes: React.FC<{}> = () => {\n\n  const [quotes, setQuote] = useState<any[]>([])\n\n  const fetchQuotes = async () => {\n    const url = \"https://pbgnz-random-quotes-api.herokuapp.com/api/quotes\";\n    const response = await fetch(url, { mode: 'no-cors'});\n    console.log(response);\n    return response;\n  };\n\n  return (\n    <div>\n      {/* Fetch data from API */}\n      <div>\n        <button className=\"fetch-button\" onClick={fetchQuotes}>\n          Get Quotes!\n        </button>\n        <br />\n      </div>\n\n      {/* Display data from API */}\n      <div className=\"quotes\">\n        {quotes &&\n          quotes.map((quote, index) => {\n            let url = `https://twitter.com/intent/tweet?text=${quote.quote} - ${quote.author}`;\n            return (\n              <div className=\"quote\" key={index}>\n                <h2>{quote.quote}</h2>\n                <h2>{quote.author}</h2>\n                <a className=\"twitter-share-button\"\n                  href={url}>\n                  Tweet\n                </a>\n              </div>\n            );\n          })}\n      </div>\n    </div>\n  );\n};\n\nexport default Quotes;","import React, { Component } from 'react';\nimport Quotes from './components/Quotes';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"header\">\n          <div className=\"container\">\n            <h1>Random Quote Machine</h1>\n          </div>\n        </header>\n        <div className=\"container\">\n          <Quotes />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}